#!/bin/bash

TARGET_DISK="/dev/vda"
HOSTNAME="voidlinux-aarch64"
USERNAME="researcher"

ROOTFS_URL="https://repo-default.voidlinux.org/live/current/void-aarch64-musl-ROOTFS-$(date +%Y%m%d).tar.xz"

EFI_SIZE_MB=512

echo "Enter keymap (e.g., us, trq, de): "
read KEYMAP_CONSOLE

echo "Enter timezone (Europe/Istanbul)"
read TIMEZONE

echo "Beginning installation for Void Linux on AArch64"
echo "WARNING: This script will destroy ALL DATA on $TARGET_DISK!"

if nc -zw1 google.com 443; then
  echo "Networking is available"
else 
  echo "Networking is unavailable."
  exit
fi

xbps-install -S

xbps-install -y wget xz git parted

echo "Downloading ROOTFS from: $ROOTFS_URL"
ROOTFS_FILE=$(basename "$ROOTFS_URL")
wget -P /tmp -O "$ROOTFS_FILE" "$ROOTFS_URL"

loadkeys "$KEYMAP_CONSOLE"
echo "Keyboard layout set to $KEYMAP_CONSOLE for live session."

echo "2. Partitioning disk $TARGET_DISK via sfdisk and parted"

echo "Erasing partitions on $TARGET_DISK via sfdisk."
sfdisk --delete $TARGET_DISK 

echo "Labeling disk GPT"
parted -s $TARGET_DISK mklabel gpt

echo "Creating efi partition"
parted -s $TARGET_DISK mkpart primary fat32 1MiB 513MiB
parted -s $TARGET_DISK set 1 esp on
parted -s $TARGET_DISK set 1 boot on
mkfs.vfat "${TARGET_DISK}1"

echo "Creating partition for root"
parted -s $TARGET_DISK mkpart primary ext4 513MiB 100%
mkfs.ext4 "${TARGET_DISK}2"

parted "$TARGET_DISK" print

echo "mounting partitions"
mount "${TARGET_DISK}2" /mnt/
mkdir -p /mnt/boot/efi/
mount "${TARGET_DISK}1" /mnt/boot/efi/

tar xvf ROOTFS_FILE -C /mnt

echo "installing base system images"
xbps-install -r /mnt -Su xbps
xbps-install -r /mnt -u
xbps-install -r /mnt base-system
xbps-remove -r /mnt -R base-container-full

echo "enter a password for the root user"
read ROOT_PASSWORD

# chroot territory
echo "now getting into chroot"
sudo xchroot /mnt /bin/bash <<'EOF'
set -e
echo "root:${ROOT_PASSWORD}" | chpasswd

ln -sf /etc/sv/dhcpcd /var/service/
ln -sf /etc/sv/sshd /var/service/

genfstab -U / >> /etc/fstab

echo "Installing GRUB for UEFI"
xbps-install -S grub-arm64-efi
grub-install --target=arm64-efi --efi-directory=/boot/efi --bootloader-id="Void"
grub-mkconfig -o /boot/grub/grub.cfg
xbps-reconfigure -fa
EOF
# end of chroot
echo "exited out of chroot"

echo "finalization, unmounting mountpoints."
umount -R /mnt
echo "the script will now put down the machine."
shutdown -r now
